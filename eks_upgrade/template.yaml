Transform: AWS::Serverless-2016-10-31
Parameters:
  SnsArn:
    Type: String
    Description: SNS ARN.
Resources:
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Function
      Handler: index.handler
      InlineCode: |
        const AWS = require('aws-sdk');
        const https = require('https');

        exports.handler = async (event) => {
        const sns = new AWS.SNS();
        const eks = new AWS.EKS();
        
        const versions = await loadVersions();
        
        if (!versions) {
            return;
        }
        
        const response = await eks.listClusters().promise();
        
        let list = ``;
        
        await Promise.all(response.clusters.map(async (clusterName) => {
            const params = {
                name: clusterName
            };
            const cluster = await eks.describeCluster(params).promise();
        
            const conf = versions[cluster.cluster.version];
        
            if (!conf) {
                return;
            }
        
            const today = new Date();
        
            const targetDate = new Date(conf.end);
        
            const timeDiff = targetDate.getTime() - today.getTime();
        
            const dayLeft = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
        
            if (dayLeft < 0) {
                list += `集群 ${clusterName} 版本 ${cluster.cluster.version} 已停止支持 ${Math.abs(dayLeft)} 天 ，请尽快升级。\n`
            } else if (dayLeft <= conf.days) {
                list += `集群 ${clusterName} 版本 ${cluster.cluster.version} 将在 ${conf.end} （${dayLeft}天后） 停止支持，请尽快升级。\n`
            }
        
        }));
        
        if (list === ``) {
            return;
        }
        
        const params = {
            Message: `【EKS重要通知】
        参考页面：https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html
        区域：${process.env.AWS_REGION}
        ${list}`, TopicArn: process.env.TOPIC_ARN
        };
        
        const result = await sns.publish(params).promise();
        
        console.log(result);
        };

        async function loadVersions() {
        
        const options = {
            hostname: 'raw.githubusercontent.com',
            path: '/aws-samples/aws-serverless-notifier-plugins/main/eks_upgrade/versions.json',
            method: 'GET',
        };
        
        let data = '';
        
        const req = https.request(options, res => {
            res.on('data', chunk => {
                data += chunk;
            });
            res.on('end', () => {
                const json = JSON.parse(data);
                console.log(json);
            });
        });
        
        req.on('error', error => {
            console.error(error);
        });
        
        req.end();
        
        await new Promise(resolve => req.on('close', resolve));
        
        return JSON.parse(data);
        }
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TOPIC_ARN: !Ref SnsArn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref SnsArn
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - eks:ListClusters
              Resource: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - eks:DescribeCluster
              Resource: '*'
  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Function}
  Schedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(1 hour)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt Function.Arn
        RoleArn: !GetAtt ScheduleToFunctionRole.Arn
  ScheduleToFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
          Condition:
            ArnLike:
              aws:SourceArn: !Sub
                - arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*/${AWS::StackName}-${ResourceId}-*
                - ResourceId: Schedule
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Function.Arn
